name: Publish jq images
on:
  push:
    tags:
      - 'jq-*'

jobs:
  prepare_env:
    name: Prepare
    strategy:
      fail-fast: false
    runs-on: [ubuntu-latest]
    steps:
      - name: Prepare env
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            // Tag format should be:
            //   jq-[<build_id>-]<JQ_GIT_SHA>[-<serial>]
            // jq- is a prefix to distinguish jq image builds from libjq-go related actions.
            // build_id is an optional custom suffix. It can be a branch name, YY.MM, YY.id, etc.
            // JQ_GIT_SHA is a required 8 chars of commit sha.
            // serial is an optional integer to create new unique git tag and thus rebuild the image.
            //
            // For example:
            // 1. Simple build from commit.
            //    jq-b6be13d5
            //  The script will checkout commit b6be13d5 from stedolan/jq and build these images:
            //   flant/jq:b6be13d5-alpine
            //   flant/jq:b6be13d5-ubuntu
            //
            // 2. to rebuild jq-b6be13d5 in the future, add a serial:
            //   jq-b6be13d5-0
            // The script will build jq again and push updated images:
            //   flant/jq:b6be13d5-alpine
            //   flant/jq:b6be13d5-ubuntu
            //
            // 3. Commit is not human friendly, so use build_id as a description:
            //   jq-dec_literal_number-2353d034-0
            // The script will checkout tag 'jq-1.6' from stedolan/jq and build these images:
            //   flant/jq:dec_literal_number-2353d034-alpine
            //   flant/jq:dec_literal_number-2353d034-ubuntu
            //
            // Note: tag for docker image may contain a maximum of 128 characters.
            // The string <build_id> will be truncated to 80 symbols.
            // Also do not use / in git tag.
            //
            // Docker documentation:
            //   A tag name must be valid ASCII and may contain lowercase and uppercase letters,
            //   digits, underscores, periods and dashes. A tag name may not start with a period
            //   or a dash and may contain a maximum of 128 characters.

            // Check tag format. Fail the job if tag is not in shape.
            let ref = context.ref;
            let gitTagRe = /^refs\/tags\/jq(-([\da-zA-Z][\da-zA-Z_\-.]*))?-([0-9a-fA-F]{8})(-(\d+))?$/;
            let match = gitTagRe.exec(ref);
            if (match === null) {
              core.setFailed(`Git tag ${ref} is not suitable for jq build. It should be jq-[<build_id>-]<JQ_GIT_SHA>[-<serial>]. See .github/workflows/jq-build.yaml`);
              return;
            }

  publish_jq_images:
    name: Release
    needs: prepare_env
    strategy:
      fail-fast: false
      matrix:
        flavour:
          #- ubuntu
          - alpine
    runs-on: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v2

      - name: Prepare env
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            // No variable export between jobs, so copy-paste from Prepare job.
            // Check tag format. Fail the job if tag is not in shape.
            let ref = context.ref;
            let gitTagRe = /^refs\/tags\/jq(-([\da-zA-Z][\da-zA-Z_\-.]*))?-([0-9a-fA-F]{8})(-(\d+))?$/;
            let match = gitTagRe.exec(ref);
            if (match === null) {
              core.setFailed(`Git tag ${ref} is not suitable for jq build. It should be jq-[<build_id>-]<JQ_GIT_SHA>[-<serial>]. See .github/workflows/jq-build.yaml`);
              return;
            }

            // Ignore jq- and -serial, save buildId and SHA.
            // match[3] is always a git sha
            // match[2] is build_id and can be undefined
            let gitSha = match[3];
            let buildId = match[2]?match[2]:"";
            let dockerTag = buildId.substring(0, (buildId.length < 80) ? buildId.length : 80);
            dockerTag = dockerTag === "" ? gitSha : `${dockerTag}-${gitSha}`;

            // Export variables for build action.
            core.exportVariable("JQ_GIT_SHA", gitSha)
            core.exportVariable("BUILD_ID", buildId)
            core.exportVariable("DOCKER_TAG", dockerTag)

      - name: Build jq image for '${{ matrix.flavour }}'
        env:
          FLAVOUR: ${{ matrix.flavour }}
          IMAGE_NAME: flant/jq
        run: |
          echo JQ_GIT_SHA=$JQ_GIT_SHA
          echo BUILD_ID=$BUILD_ID
          echo DOCKER_TAG=$DOCKER_TAG
          DOCKER_TAG=${DOCKER_TAG}-${{matrix.flavour}}
          echo flavoured_DOCKER_TAG=$DOCKER_TAG

          cd /scripts/jq-build

          docker build . --build-arg JQ_GIT_SHA=$JQ_GIT_SHA -t $IMAGE_NAME:$DOCKER_TAG -f Dockerfile-$FLAVOUR

          mkdir -p out/libjq
          ./extract-file.sh $IMAGE_NAME:$DOCKER_TAG /libjq.sha out
          ./extract-file.sh $IMAGE_NAME:$DOCKER_TAG /all.sha out
          ./extract-libjq.sh $IMAGE_NAME:$DOCKER_TAG ./out/libjq

          find ./out

          # TODO: Publish assets.

          echo "PUSH_TAGS=${$IMAGE_NAME:$DOCKER_TAG}" >> $GITHUB_ENV

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Push '${{ matrix.flavour }}' image $PUSH_TAGS
        run: |
          echo Push "'$PUSH_TAGS'"
          for tag in $(echo $PUSH_TAGS | sed s/-t//g ) ; do
            docker push $tag
          done
